=head1 NAME

Web::CSS::Selectors::Parser - A Selectors parser

=head1 SYNOPSIS

  use Web::CSS::Selectors::Parser;
  my $parser = Web::CSS::Selectors::Parser->new;
  $parsed_selectors = $parser->parse_char_string ($selectors);

=head1 DESCRIPTION

The C<Web::CSS::Selectors::Parser> is a parser for Selectors, the
element pattern language used in CSS.  It parses a Selectors string
into parsed data structure, if the input is valid, or reports a parse
error, otherwise.  In addition, it provides a method to compute the
specificity of a parsed selector.

=head1 METHODS

=over 4

=item $parser = Web::CSS::Selectors::Parser->new

Creates a new instance of the Selectors parser.

=item $parser->context ($context)

=item $context = $parser->context

Return or specify the L<Web::CSS::Context> object used to resolve
namespaces in Selectors.

=item $code = $parser->onerror

=item $parser->onerror ($code)

Return or specify the code reference to which any errors and warnings
during the parsing is reported.  The code would receive the following
name-value pairs:

=over 4

=item type (string, always specified)

A short string describing the kind of the error.  Descriptions of
error types are available at
<http://suika.suikawiki.org/gate/2007/html/error-description#{type}>,
where I<{type}> is an error type string.

For the list of error types, see
<http://suika.suikawiki.org/gate/2007/html/error-description>.

=item level (string, always specified)

A character representing the level or severity of the error, which is
one of the following characters: C<m> (violation to a MUST-level
requirement), C<s> (violation to a SHOULD-level requirement), C<w> (a
warning), and C<i> (an informational notification).

=item token (always specified)

A L<Web::CSS::Tokenizer> token where the error is detected.

=item uri (a reference to string)

The URL in which the input selectors string is found.

=item value (string, possibly missing)

A part of the input, in which an error is detected.

=back

=item $parsed = $parser->parse_char_string_as_selectors ($selectors)

Parses a character string.  If it is a valid list of selectors, the
method returns the parsed list of selectors data structure.
Otherwise, it returns C<undef>.

=item $specificity = $parser->get_selector_specificity ($parsed_selector)

XXX

Returns the specificity of a parsed selector data structure.  Note
that the input has to be a I<selector>, not a I<group of selectors>.

The return value is an array reference with four values: The C<style>
attribute flag (always C<0>), I<a>, I<b>, and I<c>.

=back

=head1 DATA STRUCTURES

This section describes the "list of selectors" data structure.

=head2 A list of selectors

An array reference, which contains one or more selector data
structures.  They corresponds to selectors in the original group of
selectors string, in order.

=head2 A selector

A selector is represented as an array reference, which contains pairs
of a combinator constant and a sequence of simple selector data
structure.  They corresponds to sequences of simple selector and
combinators appears in the original selector string, in order.  Note
that the first (index 0) item is always the descendant combinator
constant.

The constants below represent the types of combinators.

=over 4

=item DESCENDANT_COMBINATOR

A descendant combinator.

=item CHILD_COMBINATOR

A child combinator.

=item ADJACENT_SIBLING_COMBINATOR

An adjacent sibling combinator.

=item GENERAL_SIBLING_COMBINATOR

A general sibling combinator.

=back

=head2 A sequence of simple selectors

A sequence of simple selector is represented as an array reference,
which contains simple selector data strucutures.  They corresponds to
simple selectors in the original sequence of simple selectors string,
in order.

=head2 A simple selector

A simple selector is represented as an array reference whose first
(index 0) item is the type of simple selector and the following items
are arguments to the simple selector.

The constants below represent the types of simple selectors (or parts
of simple selectors).

=over 4

=item ELEMENT_SELECTOR

The "element selector" simple selector data structure takes the
following form:

  [ELEMENT_SELECTOR, $nsurl, $local_name, $prefix, $wc_prefix, $wc_type]

The item with index 1 is the namespace URL of the selector.  If it is
C<undef>, any namespace (including the null namespace) matches.  If it
is the empty string, only the null namespace matches.  Otherwise, the
specified namespace URL is compared literally with the target
element's (non-null) namespace URL.

The item with index 2 is the local name of the selector.  If it is
C<undef>, any local name matches.  Otherwise, the specified local name
is compared literally with the target element's local name (In HTML,
it might be compared ASCII case-insensitively, however).

The item with index 3 is the namespace prefix of the selector.  If it
is the empty string, the selector has no prefix (and separator '|').
Otherwise, if it is non-C<undef> value, it is the namespace prefix.
Otherwise, the value is C<undef> and the item has no effect (Either
the null namespace notation ('|' without prefix) or wildcard prefix
('*|') is used).

The item with index 4 is the namespace wildcard flag of the selector.
It is a boolean value representing whether the wildcard prefix ('*|')
is explicitly used or not.

The item with index 5 is the local name wildcard flag of the selector.
It is a boolean value representing whether the type selector is
explicitly used or not.

A sequence of simple selectors always contains a simple selector whose
type is C<ELEMENT_SELECTOR> as its first component.  There are
following patterns of "element selector" simple selector:

  [ELEMENT_SELECTOR, undef, 'a'  , ''   , 0, 0]   a
  [ELEMENT_SELECTOR, undef, undef, ''   , 0, 1]   *
  [ELEMENT_SELECTOR, ''   , 'a'  , undef, 0, 0]  |a
  [ELEMENT_SELECTOR, ''   , undef, undef, 0, 1]  |*
  [ELEMENT_SELECTOR, undef, 'a'  , undef, 1, 0] *|a
  [ELEMENT_SELECTOR, undef, undef, undef, 1, 1] *|*
  [ELEMENT_SELECTOR, undef, undef, ''   , 0, 0] .b (= *.b)

  @namespace '';
  [ELEMENT_SELECTOR, ''   , 'a'  , ''   , 0, 0]   a
  [ELEMENT_SELECTOR, ''   , undef, ''   , 0, 1]   *
  [ELEMENT_SELECTOR, ''   , 'a'  , undef, 0, 0]  |a
  [ELEMENT_SELECTOR, ''   , undef, undef, 0, 1]  |*
  [ELEMENT_SELECTOR, undef, 'a'  , undef, 1, 0] *|a
  [ELEMENT_SELECTOR, undef, undef, undef, 1, 1] *|*
  [ELEMENT_SELECTOR, ''   , undef, ''   , 0, 0] .b (= *.b)

  @namespace 'ns';
  [ELEMENT_SELECTOR, 'ns' , 'a'  , ''   , 0, 0]   a
  [ELEMENT_SELECTOR, 'ns' , undef, ''   , 0, 1]   *
  [ELEMENT_SELECTOR, ''   , 'a'  , undef, 0, 0]  |a
  [ELEMENT_SELECTOR, ''   , undef, undef, 0, 1]  |*
  [ELEMENT_SELECTOR, undef, 'a'  , undef, 1, 0] *|a
  [ELEMENT_SELECTOR, undef, undef, undef, 1, 1] *|*
  [ELEMENT_SELECTOR, 'ns' , undef, ''   , 0, 0] .b (= *.b)

  @namespace p '';
  [ELEMENT_SELECTOR, ''   , 'a'  , 'p'  , 0, 0] p|a
  [ELEMENT_SELECTOR, ''   , undef, 'p'  , 0, 1] p|*

  @namespace p 'ns';
  [ELEMENT_SELECTOR, 'ns' , 'a'  , 'p'  , 0, 0] p|a
  [ELEMENT_SELECTOR, 'ns' , undef, 'p'  , 0, 1] p|*

  In :not() or :match()
  [ELEMENT_SELECTOR, undef, undef, ''   , 0, 0] .b (= *|*.b)

=item ID_SELECTOR

An ID selector.  The first argument (item of index 1) is the ID.

=item CLASS_SELECTOR

A class selector.  The first argument (item of index 1) is the class.

=item PSEUDO_CLASS_SELECTOR

A pseudo-class selector.  The first argument (item of index 1) is the
pseudo-class name in lowercase.  If the pseudo-class takes a string or
identifier argument (e.g. C<:lang()> or C<:contains()>), the second
argument (item of index 2) is the argument (with no case folding).
Otherwise, if the pseudo-class takes a C<an+b> argument
(e.g. C<:nth-child()>), the second argument (item of index 2)
represents the I<a> value and the third argument (item of index 3)
represents the I<b> value (Even an incomplete argument is normalized
to this form).  If the pseudo-class takes a list of selectors
(e.g. C<:not()>), the item with index 2 is the list of selectors data
structure, representing the selectors within the functional notation.

=item PSEUDO_ELEMENT_SELECTOR

A pseudo-element specification.  The first argument (item of index 1)
is the pseudo-element name in lowercase.  If the pseudo-element takes
a list of selectors (e.g. C<::cue()>), the item with index 2 is the
list of selectors data structure, representing the selectors within
the functional notation.

=item ATTRIBUTE_SELECTOR

An attribute selector.  The first argument (item of index 1) is the
attribute name.  The second argument (item of index 2) is the type of
matching.  The third argument (item of index 3) depends on the type of
matching.  The fourth argument (item of index 4) is the namespace
prefix, if exists and is not the empty string, or C<undef> otherwise.

The constants below represent the types of matches used in attribute
selectors.

=over 4

=item EXISTS_MATCH

Match by the existence of an attribute.  The third argument (item of
index 3) is C<undef>.

=item EQUALS_MATCH

Exact match.  The third argument (item of index 3) is the expected
value.

=item INCLUDES_MATCH

Includes match (typically used for class attributes).  The third
argument (item of index 3) is the expected value.

=item DASH_MATCH

Dash match (typically used for language tag attributes).  The third
argument (item of index 3) is the expected value.

=item PREFIX_MATCH

Prefix match.  The third argument (item of index 3) is the expected
value.

=item SUFFIX_MATCH

Suffix match.  The third argument (item of index 3) is the expected
value.

=item SUBSTRING_MATCH

Substring match.  The third argument (item of index 3) is the expected
value.

=back

=back

The constants mentioned in this section can be exported by C<use>ing
the module:

  use Web::CSS::Selectors::Parser;

=head1 SPECIFICATIONS

Selectors Level 4 <http://dev.w3.org/csswg/selectors4/>.

CSSOM <http://dev.w3.org/csswg/cssom/>.

The CSS syntax <http://www.w3.org/TR/CSS21/syndata.html>.

The C<style> attribute specificity
<http://www.w3.org/TR/CSS21/cascade.html#specificity>.

manakai Selectors Extensions
<http://suika.suikawiki.org/gate/2005/sw/manakai/Selectors%20Extensions>.

Supported standards - Selectors
<http://suika.suikawiki.org/gate/2007/html/standards#selectors>.

=head1 SEE ALSO

L<Web::CSS::Selectors::API>, L<Web::CSS::Selectors::Serializer>.

=head1 AUTHOR

Wakaba <wakaba@suikawiki.org>.

=head1 LICENSE

Copyright 2007-2013 Wakaba <wakaba@suikawiki.org>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
